{"changed":true,"filter":false,"title":"signin.php","tooltip":"/gplus-quickstart-php/signin.php","value":"<?php\n/*\n * Sample application for Google+ client to server authentication.\n * Remember to fill in the OAuth 2.0 client id and client secret,\n * which can be obtained from the Google Developer Console at\n * https://code.google.com/apis/console\n *\n * Copyright 2013 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * Note (Gerwin Sturm):\n * Include path is still necessary despite autoloading because of the require_once in the libary\n * Client library should be fixed to have correct relative paths\n * e.g. require_once '../Google/Model.php'; instead of require_once 'Google/Model.php';\n */\nset_include_path(get_include_path() . PATH_SEPARATOR . __DIR__ .'/vendor/google/apiclient/src');\n\nrequire_once __DIR__.'/vendor/autoload.php';\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Simple server to demonstrate how to use Google+ Sign-In and make a request\n * via your own server.\n *\n * @author silvano@google.com (Silvano Luciani)\n */\n\n/**\n * Replace this with the client ID you got from the Google APIs console.\n */\nconst CLIENT_ID = '309792206339-6r9jfbj0mesbu1lgm005ekshbr1qfs8a.apps.googleusercontent.com';\n\n/**\n * Replace this with the client secret you got from the Google APIs console.\n */\nconst CLIENT_SECRET = 'zPJvc9HeovCL6hsBSPMjgReUg';\n\n/**\n * Optionally replace this with your application's name.\n */\nconst APPLICATION_NAME = \"Google+ PHP Quickstart\";\n\n$client = new Google_Client();\n$client->setApplicationName(APPLICATION_NAME);\n$client->setClientId(CLIENT_ID);\n$client->setClientSecret(CLIENT_SECRET);\n$client->setRedirectUri('postmessage');\n\n$plus = new Google_Service_Plus($client);\n\n$app = new Silex\\Application();\n$app['debug'] = true;\n\n$app->register(new Silex\\Provider\\TwigServiceProvider(), array(\n    'twig.path' => __DIR__,\n));\n$app->register(new Silex\\Provider\\SessionServiceProvider());\n\n// Initialize a session for the current user, and render index.html.\n$app->get('/', function () use ($app) {\n    $state = md5(rand());\n    $app['session']->set('state', $state);\n    return $app['twig']->render('index.html', array(\n        'CLIENT_ID' => CLIENT_ID,\n        'STATE' => $state,\n        'APPLICATION_NAME' => APPLICATION_NAME\n    ));\n});\n\n// Upgrade given auth code to token, and store it in the session.\n// POST body of request should be the authorization code.\n// Example URI: /connect?state=...&gplus_id=...\n$app->post('/connect', function (Request $request) use ($app, $client) {\n    $token = $app['session']->get('token');\n\n    if (empty($token)) {\n        // Ensure that this is no request forgery going on, and that the user\n        // sending us this connect request is the user that was supposed to.\n        if ($request->get('state') != ($app['session']->get('state'))) {\n            return new Response('Invalid state parameter', 401);\n        }\n\n        // Normally the state would be a one-time use token, however in our\n        // simple case, we want a user to be able to connect and disconnect\n        // without reloading the page.  Thus, for demonstration, we don't\n        // implement this best practice.\n        //$app['session']->set('state', '');\n\n        $code = $request->getContent();\n        // Exchange the OAuth 2.0 authorization code for user credentials.\n        $client->authenticate($code);\n        $token = json_decode($client->getAccessToken());\n\n        // You can read the Google user ID in the ID token.\n        // \"sub\" represents the ID token subscriber which in our case\n        // is the user ID. This sample does not use the user ID.\n        $attributes = $client->verifyIdToken($token->id_token, CLIENT_ID)\n            ->getAttributes();\n        $gplus_id = $attributes[\"payload\"][\"sub\"];\n\n        // Store the token in the session for later use.\n        $app['session']->set('token', json_encode($token));\n        $response = 'Successfully connected with token: ' . print_r($token, true);\n    } else {\n        $response = 'Already connected';\n    }\n\n    return new Response($response, 200);\n});\n\n// Get list of people user has shared with this app.\n$app->get('/people', function () use ($app, $client, $plus) {\n    $token = $app['session']->get('token');\n\n    if (empty($token)) {\n        return new Response('Unauthorized request', 401);\n    }\n\n    $client->setAccessToken($token);\n    $people = $plus->people->listPeople('me', 'visible', array());\n\n    /*\n     * Note (Gerwin Sturm):\n     * $app->json($people) ignores the $people->items not returning this array\n     * Probably needs to be fixed in the Client Library\n     * items isn't listed as public property in Google_Service_Plus_Person\n     * Using ->toSimpleObject for now to get a JSON-convertible object\n     */\n    return $app->json($people->toSimpleObject());\n});\n\n// Revoke current user's token and reset their session.\n$app->post('/disconnect', function () use ($app, $client) {\n    $token = json_decode($app['session']->get('token'))->access_token;\n    $client->revokeToken($token);\n    // Remove the credentials from the user's session.\n    $app['session']->set('token', '');\n    return new Response('Successfully disconnected', 200);\n});\n\n$app->run();\n","undoManager":{"mark":8,"position":9,"stack":[[{"start":{"row":45,"column":19},"end":{"row":45,"column":33},"action":"remove","lines":["YOUR_CLIENT_ID"],"id":2}],[{"start":{"row":45,"column":19},"end":{"row":45,"column":91},"action":"insert","lines":["442518280719-r9kl533piohdg342uudfob6dduotm0dl.apps.googleusercontent.com"],"id":3}],[{"start":{"row":50,"column":23},"end":{"row":50,"column":41},"action":"remove","lines":["YOUR_CLIENT_SECRET"],"id":4}],[{"start":{"row":50,"column":23},"end":{"row":51,"column":0},"action":"insert","lines":["hcfRrZaZI71-f8zVGfZIdTqL",""],"id":5}],[{"start":{"row":50,"column":47},"end":{"row":51,"column":0},"action":"remove","lines":["",""],"id":6}],[{"start":{"row":45,"column":19},"end":{"row":45,"column":91},"action":"remove","lines":["442518280719-r9kl533piohdg342uudfob6dduotm0dl.apps.googleusercontent.com"],"id":7}],[{"start":{"row":45,"column":19},"end":{"row":46,"column":0},"action":"insert","lines":["309792206339-6r9jfbj0mesbu1lgm005ekshbr1qfs8a.apps.googleusercontent.com",""],"id":8}],[{"start":{"row":45,"column":91},"end":{"row":46,"column":0},"action":"remove","lines":["",""],"id":9}],[{"start":{"row":50,"column":23},"end":{"row":50,"column":47},"action":"remove","lines":["hcfRrZaZI71-f8zVGfZIdTqL"],"id":10},{"start":{"row":50,"column":23},"end":{"row":50,"column":47},"action":"insert","lines":["zPJvc9HeovCL6hsBSPMjgReU"]}],[{"start":{"row":50,"column":47},"end":{"row":50,"column":48},"action":"insert","lines":["g"],"id":11}]]},"ace":{"folds":[],"scrolltop":480,"scrollleft":0,"selection":{"start":{"row":49,"column":3},"end":{"row":49,"column":3},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":33,"state":"php-start","mode":"ace/mode/php"}},"timestamp":1453206777940}